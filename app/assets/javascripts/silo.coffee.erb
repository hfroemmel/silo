# silo.coffee.erb
#
# Defines helper functions in the $.silo namespace.
do ($ = jQuery) ->

  # The silo namespace
  $.silo =

    # Holds paths to several locations. The rails asset pipeline does not
    # include the UrlHelpers, so we have to hack around:
    #
    #   <% paths = Rails.application.routes.url_helpers %>
    #
    # Now we can use paths.some_location_path inside erb tags.
    _locations:
      advisers:
        index:      '<%= paths.ajax_tag_path(id: :advisers) %>'
      businesses:
        index:      '<%= paths.ajax_tag_path(id: :businesses) %>'
      countries:
        index:      '<%= paths.ajax_areas_path %>'
      help:         '<%= paths.ajax_help_path(id: ':id') %>'
      helpers:
        confirm:    '<%= paths.ajax_helper_path(id: :confirm) %>'
        editable:   '<%= paths.ajax_helper_path(id: :editable) %>'
      languages:
        index:      '<%= paths.ajax_languages_path %>'
      lists:
        current:    '<%= paths.ajax_list_path(id: :current) %>'
        experts:    '<%= paths.list_experts_path(list_id: ':id') %>'
        partners:   '<%= paths.list_partners_path(list_id: ':id') %>'
        projects:   '<%= paths.list_projects_path(list_id: ':id') %>'

    # Returns the path to the specified location. The location must be
    # specified as dot separated key. With the second argument parameters
    # and a format can be set.
    #
    #   $.silo.location('areas')
    #   #=> '/ajax/areas'
    #
    #   $.silo.location('lists.experts', id: 12)
    #   #=> '/lists/12/experts'
    #
    #   $.silo.location('lists.current', format: 'json')
    #   #=> '/ajax/lists/current.json'
    #
    # Raises an exception for invalid keys.
    location: (keys, params = {}) ->
      if keys not instanceof Array
        keys = keys.trim().split('.')

      path = @_locations

      try
        path = path[k] for k in keys
      catch error

      while typeof(path) isnt 'string'
        unless path? and path.hasOwnProperty('index')
          throw "Invalid key: #{keys.join('.')}"

        path = path.index

      if params.format?
        path += ".#{params.format}"
        delete(params.format)

      @replaceParams(path, params)

    # Replaces the params (:param) in a location path.
    replaceParams: (path, params) ->
      for param, value of params
        path = path.replace(new RegExp(":#{param}(?=/|$)", 'gi'), value)
      path

    # Detects the availability of localStorage. Returns true if localStorage
    # is available, else false.
    hasStorage: ->
      @_hasStorage if @_hasStorage?

      try
        localStorage.setItem('_silo', '_silo')
        localStorage.removeItem('_silo')
        @_hasStoage = true
      catch error
        @_hasStorage = false

    # Redirects the evil browser.
    redirectIE: ->
      if /msie/.test(navigator.userAgent.toLowerCase())
        window.location.replace('/ie.html')

    # Holds some metadata. It gets populated on access.
    _meta: {}

    # Returns the content of a meta tag.
    meta: (key) -> @_meta[key] ||= $("meta[name=#{key}]").attr('content')

    # A simple layer.
    _layer:
      layer: $('<div>').addClass('layer')
      child: null

      fadeIn: (child) ->
        @child.detach() if @child
        @layer.appendTo('body').fadeIn(200)
        @child = child.appendTo('body').fadeIn(200)

      fadeOut: ->
        @layer.fadeOut(200, -> $(@).detach())
        @child.fadeOut(200, -> $(@).detach()) if @child

    # Opens the overlay.
    overlay: (child) -> @_layer.fadeIn(child)

    # Closes the overlay.
    closeOverlay: -> @_layer.fadeOut()

    # Debounces a function.
    debounce: (callback, delay = 100) ->
      timeout = null

      ->
        args = arguments
        clearTimeout(timeout)
        timeout = setTimeout((=> callback.apply(@, args)), delay)
